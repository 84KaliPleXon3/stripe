<?xml version='1.0'?>
<config
    xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
    xsi:noNamespaceSchemaLocation='urn:magento:module:Magento_Store:etc/config.xsd'
>
    <default>
		<df_payment>
			<stripe>
<!-- 2016-03-06
How is a payment method's getConfigPaymentAction() used? https://mage2.pro/t/724
How is a payment method's authorize() used? https://mage2.pro/t/707
How is a payment method's capture() used? https://mage2.pro/t/708
Нужно писать именно «authorize_capture», а не «capture»:
https://github.com/magento/magento2/blob/6ce74b2/app/code/Magento/Payment/Model/Method/AbstractMethod.php#L33
https://github.com/magento/magento2/blob/6ce74b2/app/code/Magento/Sales/Model/Order/Payment.php#L411-L433
-->
				<actionForNew>authorize_capture</actionForNew>
				<actionForReturned>authorize_capture</actionForReturned>
				<currency>order</currency>
<!-- 2016-03-08
https://stripe.com/docs/api/php#create_charge-description
«An arbitrary string which you can attach to a charge object.
It is displayed when in the web interface alongside the charge.
Note that if you use Stripe to send automatic email receipts to your customers,
your receipt emails will include the description of the charge(s) that they are describing.»
Текст может иметь произвольную длину и не обрубается в интерфейсе Stripe. https://mage2.pro/t/903
-->
				<description>{order.id}</description>
				<description_rules>
					<locations>
						<merchant>
							<shown>1</shown>
						</merchant>
					</locations>
					<maxLength>
						<title>The Stripe API reference: «CORE RESOURCES» → «Charges» → «Create a charge». See the «description» parameter.</title>
						<url>https://stripe.com/docs/api/php#create_charge-description</url>
					</maxLength>
				</description_rules>
<!-- 2016-08-22
Значением этой опции по умолчанию и так является true: @see \Df\Payment\Settings::requireBillingAddress()
Однако здесь это значение всё равно нужно указать, чтобы галка была установлена для чекбокса.
-->
				<requireBillingAddress>1</requireBillingAddress>
				<title>Bank Card</title>
				<!-- 2016-03-15 -->
				<title_backend>Stripe</title_backend>
			</stripe>
		</df_payment>
        <payment>
            <dfe_stripe>
<!-- 2017-12-04
"The module is not shown
in the «Mageplaza Extensions» → «One Step Checkout» → «General Configuration» → «Default Payment Method»
Magento 2 backend dropdown": https://github.com/mage2pro/stripe/issues/58
I need it to make the extension compatible with MagePlaza's One Step Checkout,
which uses the following code for the «Mageplaza Extensions» → «One Step Checkout» →
«General Configuration» → «Default Payment Method» dropdown:
\Mageplaza\Osc\Model\System\Config\Source\PaymentMethods::getActiveMethods():
	public function getActiveMethods() {
		$methods = [];
		$paymentConfig = $this->_scopeConfig->getValue('payment', ScopeInterface::SCOPE_STORE, null);
		if ($this->_oscConfig->isEnabledMultiSafepay()) {
			$paymentConfig = array_merge(
				$this->_scopeConfig->getValue('payment', ScopeInterface::SCOPE_STORE, null)
				,$this->_scopeConfig->getValue('gateways', ScopeInterface::SCOPE_STORE, null)
			);
		}
		foreach ($paymentConfig as $code => $data) {
			if (isset($data['active'], $data['model']) && (bool)$data['active']) {
				try {
					if (class_exists($data['model'])) {
						$methodModel = $this->_paymentMethodFactory->create($data['model']);
						$methodModel->setStore(null);
						if ($methodModel->getConfigData('active', null)) {
							$methods[$code] = $methodModel;
						}
					}
				} catch (\Exception $e) {
					continue;
				}
			}
		}
		return $methods;
	}
This code is clearly copy-pasted (with some modifications)
from the \Magento\Payment\Model\Config::getActiveMethods() method:
https://github.com/magento/magento2/blob/2.0.0/app/code/Magento/Payment/Model/Config.php#L85-L106
https://github.com/magento/magento2/blob/2.2.1/app/code/Magento/Payment/Model/Config.php#L88-L108

M2 core uses this method only from the
\Magento\Payment\Observer\UpdateOrderStatusForPaymentMethodsObserver::execute() observer:
	public function execute(\Magento\Framework\Event\Observer $observer) {
		if ($observer->getEvent()->getState() != \Magento\Sales\Model\Order::STATE_NEW) {
			return;
		}
		$status = $observer->getEvent()->getStatus();
		$defaultStatus = $this->_salesOrderConfig->getStateDefaultStatus(\Magento\Sales\Model\Order::STATE_NEW);
		$methods = $this->_paymentConfig->getActiveMethods();
		foreach ($methods as $method) {
			if ($method->getConfigData('order_status') == $status) {
				$this->_resourceConfig->saveConfig(
					'payment/' . $method->getCode() . '/order_status', $defaultStatus, 'default', 0
				);
			}
		}
	}
https://github.com/magento/magento2/blob/2.0.0/app/code/Magento/Payment/Observer/UpdateOrderStatusForPaymentMethodsObserver.php#L45-L67
https://github.com/magento/magento2/blob/2.2.1/app/code/Magento/Payment/Observer/UpdateOrderStatusForPaymentMethodsObserver.php#L45-L67

I need to set <active>1</active>
because the both `getActiveMethods()` methods (the Mageplaza's and M2 core's) use the following code:
	if (isset($data['active'], $data['model']) && (bool)$data['active']) {
<active>1</active> does not mean the payment module will be always enabled nor even enabled by default
because the following code will take into account the actial «Enable?» backend option value:
	if ($methodModel->getConfigData('active', null)) {
		$methods[$code] = $methodModel;
	}
-->
				<active>1</active>
<!-- 2017-07-24
@used-by \Magento\Payment\Helper\Data::getMethodModelConfigName():
	protected function getMethodModelConfigName($code) {
		return sprintf('%s/%s/model', self::XML_PATH_PAYMENT_METHODS, $code);
	}
https://github.com/magento/magento2/blob/2.2.0-RC1.5/app/code/Magento/Payment/Helper/Data.php#L85-L92
-->
				<model>Dfe\Stripe\Method</model>
            </dfe_stripe>
        </payment>
    </default>
</config>